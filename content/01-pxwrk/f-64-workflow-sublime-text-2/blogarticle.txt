Title: Workflow #2 – Sublime Text 2 Settings

----

Date: 2014-01-xx

----

Text:

In meinem vorherigen Artikel habe ich einen groben Überblick gegeben, wie mein Workflow aussieht, und welche Tools ich nutze. Wie angekündigt erkläre ich diesmal wie man es sich im **Sublime Text 2** gemütlich macht. Dieser Artikel soll erstmal nur die Settings erklären. Im folgenden Artikel geht's dann um Plugins für Sublime.

Randnotiz:
Mir ist klar, dass da schon ein Sublime Text **3** veröffentlicht wurde. Der einzig für mich erkennbare unterschied liegt aber nur darin, dass manche Plugins in der Version 3 nicht mehr funktionieren. Wenn ihr allerdings den neusten Editor verwenden wollt, sollte das kein Problem sein. Was ich im folgenden schreibe sollte größten teils exakt so auf Sublime Text 2 anwendbar sein.

Ich habe lange mit Coda gearbeitet, danach lange mit Espresso, und ich habe auch alle anderen erdenklichen Editoren ausprobiert, von denen ich je gehört habe. Und (link: http://www.sublimetext.com/2 text: Sublime Text 2) ist mit abstand der Beste, der mir je untergekommen ist. Man braucht ein bisschen überwindung, wenn man noch nicht gewohnt ist viel über die Tastatur statt Maus zu erledigen, aber es lohnt sich das zu lernen.

Ich öffne also Sublime und bringe das Fenster per (link: http://www.irradiatedsoftware.com/cinch/ text: Cinch) auf die volle Bildschirm-Größe.

### Color Scheme

Zuerst, solltet ihr die Farben so einstellen, dass ihr euch wohlfühlt. Ein paar Farbsets findet ihr im Menü unter **"Sublime Text 2" > "Preferences" > "Color Scheme"**. Interessantere Farbkombinationen findet ihr sehr übersichtlich präsentiert auf (link: http://colorsublime.com/ text: colorsublime.com).

### Theme

Unabhängig von den Syntax-Highlighting-Farben, könnt ihr auch ein anderes Theme für's drumherum wählen. Das vermutlich belibteste/verbreitetste ist (link: https://github.com/buymeasoda/soda-theme/ text: Soda). Wenn ihr euch noch einen Moment gedulden könnt, dann wartet mal auf den nächsten Workflow-Artikel. Da erkläre ich euch, wie man Soda ganz einfach per Sublime Package-Manager installieren kann.

### Verhalten

Alle Settings sind in .json files definiert. Es gibt verschiedene Settings in verschiedenen Ordnern. Sie werden in einer bestimmten Reihenfolge eingelesen. Schaut mal oben in der Taskleiste nach `"Sublime Text 2" > "Preferences" > "Settings - Default"`. Hier findet ihr alle Einstellungen die du vornehmen kannst. Du solltest diese Datei aber besser unberührt lassen. Du kannst alles was in "Settings - Default" definiert wurde in "Settings - User" überschreiben. Es gibt noch weitere nützliche Settings-Dateien, die du im laufe der Zeit kennen lernen wirst. Beispielsweise Betriebsystem-, Programmiersprachen-, und Projekt-Bezogene Einstellungen.

Öffne mal deine User-Settings (`⌘`+`,`), vermultich ist da noch nichts eingetragen. Scheib mal rein:

<pre class="language-javascript line-numbers" data-start="1">
<code>{
  "font_size": 15.0
}</code>
</pre>

Wenn du jetzt die font_size bspw. auf 20 änderst, wirst du sofort, wenn du die Datei abspeicherst (`⌘`+`s`) die Änderungen sehen.

### Empfehlungen

(Bedenkt bei allem Folgendem: Die letzte Zeile in einem Json-Objekt darf kein Komma am Ende enthalten.)

Ihr solltet umbedings festlegen, welche Line-Endings und ob ihr lieber Tabs oder Spaces für Einrückungen benutzt. Du weißt nicht warum? Dann empfehle ich dir den Artikel (link: http://www.der-zyklop.de/pxwrk/tabs-vs-spaces/ text: Tabs vs. Spaces && Line-Endings. Fallstricke der Code-Formatierung). Meine Settings dazu sind:

<pre class="language-javascript line-numbers" data-start="2">
<code>  "default_line_ending": "unix",
  "detect_indentation": true,
  "tab_size": 2,
  "translate_tabs_to_spaces": true,
  "draw_white_space": "all",
  "trim_trailing_white_space_on_save": true,</code>
</pre>






Auch sollten Dateien (link: http://robots.thoughtbot.com/no-newline-at-end-of-file text: immer mit einer leeren Zeile) enden.

<pre class="language-javascript line-numbers" data-start="8">
<code>  "ensure_newline_at_eof_on_save": true,</code>
</pre>

Wenn man Ordner öffnet, dann bekommt man eine Übersicht der Inhalte in der Seitenleiste. Um dort Ordner besser von Dateien unterscheiden zu können, setze ich:

<pre class="language-javascript line-numbers" data-start="9">
<code>  "bold_folder_labels": true,</code>
</pre>

Damit ich immer sofort weiß in welcher Zeile ich mich befinde setze ich:

<pre class="language-javascript line-numbers" data-start="10">
<code>  "highlight_line": true,</code>
</pre>

Und damit ich immer weiß, ob ich die aktielle Datei abgespeichert habe oder nicht, lasse ich die Text-Farbe im Tab-Reiter ändern.

<pre class="language-javascript line-numbers" data-start="11">
<code>  "highlight_modified_tabs": true,</code>
</pre>


Code wird unübersichtlich, wenn er zu viele Zeichen pro Zeile hat. Also zeichne ich eine Linie nach 80 Zeichen.

<pre class="language-javascript line-numbers" data-start="12">
<code>  "rulers":
  [
    80
  ],</code>
</pre>


Ich nutze die sogenante Minimap (auf der rechten Seite) nicht. Also schalte ich sie per `"View" > "Hide Minimap"` aus.

Als Schrift verwende ich die Kostenfreie (link: http://www.fontsquirrel.com/fonts/droid-sans-mono text: Droid Sans Mono).

<pre class="language-javascript line-numbers" data-start="16">
<code>  "font_face": "Droid Sans Mono",
  "font_size": 17.0,</code>
</pre>

Und zu guter letzt gibt es eine Reihe an Ordnern, die will ich in meinem Editor nie angezeigt bekommen, weil ich darin auch nie etwas zu ändern habe.

<pre class="language-javascript line-numbers" data-start="18">
<code>  "folder_exclude_patterns": [
    ".sass-cache",
    ".settings",
    ".svn",
    "node_modules",
    ".git"
  ],</code>
</pre>


# Tastenkombination -> durchskippen
# cmd shift t


----

Tags: code, workflow, work, sublime
